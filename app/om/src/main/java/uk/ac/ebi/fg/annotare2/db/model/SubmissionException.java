package uk.ac.ebi.fg.annotare2.db.model;import org.hibernate.annotations.Filter;import org.hibernate.annotations.FilterDef;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.FetchType;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.JoinColumn;import javax.persistence.ManyToOne;import javax.persistence.Table;import java.time.LocalDateTime;import static uk.ac.ebi.fg.annotare2.db.model.FilterNames.NOT_FIXED_SUBMISSION_EXCEPTION_FILTER;@Entity@Table(name = "submissions_exceptions")@FilterDef(name = NOT_FIXED_SUBMISSION_EXCEPTION_FILTER, defaultCondition = "is_fixed = 0")@Filter(name = NOT_FIXED_SUBMISSION_EXCEPTION_FILTER)public class SubmissionException {    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    private Long id;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "submission_id", nullable = false)    private Submission submission;    @Column(name = "created", nullable = false)    private LocalDateTime created;    @Column(name = "exception_message", nullable = false, columnDefinition = "TEXT")    private String exceptionMessage;    @Column(name = "exception_stacktrace", nullable = false, columnDefinition = "TEXT")    private String exceptionStackTrace;    @Column(name = "is_fixed", nullable = false)    private boolean isFixed;    public Long getId() {        return id;    }    public void setId(Long id) {        this.id = id;    }    public LocalDateTime getCreated() {        return created;    }    public void setCreated(LocalDateTime created) {        this.created = created;    }    public String getExceptionMessage() {        return exceptionMessage;    }    public void setExceptionMessage(String exceptionMessage) {        this.exceptionMessage = exceptionMessage;    }    public String getExceptionStackTrace() {        return exceptionStackTrace;    }    public void setExceptionStackTrace(String exceptionStackTrace) {        this.exceptionStackTrace = exceptionStackTrace;    }    public boolean isFixed() {        return isFixed;    }    public void setFixed(boolean fixed) {        isFixed = fixed;    }    public Submission getSubmission() {        return submission;    }    public void setSubmission(Submission submission) {        this.submission = submission;    }}