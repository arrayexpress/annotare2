/*
 * Copyright 2009-2016 European Molecular Biology Laboratory
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package uk.ac.ebi.fg.annotare2.web.gwt.editor.client.view.experiment.setup;

import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ChangeEvent;
import com.google.gwt.event.dom.client.ChangeHandler;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.client.ui.*;
import uk.ac.ebi.fg.annotare2.submission.model.ExtractAttribute;
import uk.ac.ebi.fg.annotare2.web.gwt.common.client.view.NotificationPopupPanel;
import uk.ac.ebi.fg.annotare2.web.gwt.common.shared.exepriment.ExperimentSetupSettings;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import static java.util.Arrays.asList;
import static uk.ac.ebi.fg.annotare2.submission.model.ExperimentProfileType.PLANT_SEQUENCING;
import static uk.ac.ebi.fg.annotare2.submission.model.ExperimentProfileType.SEQUENCING;
import static uk.ac.ebi.fg.annotare2.web.gwt.editor.client.view.utils.ValidationUtils.integerValuesOnly;


/**
 * @author Olga Melnichuk
 */
public class HighThroughputSeqSettings extends Composite implements HasSubmissionSettings {

    //HTML description;

    @UiField
    TextBox numberOfSamples;

    @UiField
    TextBox nominalLength;

    @UiField
    TextBox nominalSDev;

    @UiField
    ListBox librarySource;

    @UiField
    ListBox librarySelection;

    @UiField
    ListBox libraryStrategy;

    @UiField
    ListBox libraryLayout;

    @UiField
    ListBox strandLibraries;

    @UiField
    ListBox orientation;

    @UiField
    Label orientationLabel;

    @UiField
    Label nominalLengthLabel;

    @UiField
    Label nominalSDevLabel;


    interface Binder extends UiBinder<Widget, HighThroughputSeqSettings> {
        Binder BINDER = GWT.create(Binder.class);
    }

    public HighThroughputSeqSettings() {
        initWidget(Binder.BINDER.createAndBindUi(this));



        /*description.setHTML(
                fromSafeConstant("An example is " +
                        "<a target='_blank' href='http://www.ebi.ac.uk/arrayexpress/experiments/E-MTAB-582/'>E-MTAB-582</a>, " +
                        "<a target='_blank' href='http://europepmc.org/abstract/MED/21983088/reload=0;jsessionid=tcoeGSkyb7AXGQXpR7vz.6'>" +
                        "Europe PMC 21983088</a>. Sequencing experiments produce raw sequence data " +
                        "generated by next-generation sequencing platforms such as Illumina " +
                        "Genome Analyzer/HiSeq, 454 and ABI SOLiD."));*/

        nominalLength.setVisible(false);
        nominalSDev.setVisible(false);
        orientation.setVisible(false);
        nominalLengthLabel.setVisible(false);
        nominalSDevLabel.setVisible(false);
        orientationLabel.setVisible(false);

        libraryLayout.addChangeHandler(new ChangeHandler() {
            @Override
            public void onChange(ChangeEvent changeEvent) {
                showPairedOptions(libraryLayout.getSelectedItemText());
            }
        });
        integerValuesOnly(numberOfSamples);

        populateDropDowns();


    }

    private void showPairedOptions(String selectedItemText) {
        if(selectedItemText.equalsIgnoreCase("SINGLE"))
        {
            nominalLength.setVisible(false);
            nominalSDev.setVisible(false);
            orientation.setVisible(false);
            nominalLengthLabel.setVisible(false);
            nominalSDevLabel.setVisible(false);
            orientationLabel.setVisible(false);
        }
        else
        {
            nominalLength.setVisible(true);
            nominalSDev.setVisible(true);
            orientation.setVisible(true);
            nominalLengthLabel.setVisible(true);
            nominalSDevLabel.setVisible(true);
            orientationLabel.setVisible(true);
        }
    }

    private void populateDropDowns()
    {
        for (String option:ExtractAttribute.LIBRARY_SOURCE.getOptions()
                ) {
            librarySource.addItem(option);}

        for (String option:ExtractAttribute.LIBRARY_SELECTION.getOptions()
                ) {
            librarySelection.addItem(option);}

        for (String option:ExtractAttribute.LIBRARY_STRATEGY.getOptions()
                ) {
            libraryStrategy.addItem(option);}

        for (String option:ExtractAttribute.ORIENTATION.getOptions()
                ) {
            orientation.addItem(option);}

        for (String option:ExtractAttribute.LIBRARY_STRAND.getOptions()
                ) {
            strandLibraries.addItem(option);}

        for (String option:ExtractAttribute.LIBRARY_LAYOUT.getOptions()
                ) {
            libraryLayout.addItem(option);}
    }

    @Override
    public ExperimentSetupSettings getSettings() {

        ExperimentSetupSettings settings = new ExperimentSetupSettings(PLANT_SEQUENCING);
        HashMap<ExtractAttribute,String> values = new HashMap<>();
        settings.setNumberOfHybs(intValue(numberOfSamples.getValue()));

        values.put(ExtractAttribute.LIBRARY_LAYOUT,libraryLayout.getSelectedItemText());
        values.put(ExtractAttribute.LIBRARY_SELECTION,librarySelection.getSelectedItemText());
        values.put(ExtractAttribute.LIBRARY_SOURCE,librarySource.getSelectedItemText());
        values.put(ExtractAttribute.LIBRARY_STRAND,strandLibraries.getSelectedItemText());
        values.put(ExtractAttribute.LIBRARY_STRATEGY,libraryStrategy.getSelectedItemText());
        values.put(ExtractAttribute.NOMINAL_LENGTH,nominalLength.getValue());
        values.put(ExtractAttribute.NOMINAL_SDEV,nominalSDev.getValue());
        values.put(ExtractAttribute.ORIENTATION,orientation.getSelectedItemText());

        settings.setExtractValues(values);

        return settings;
    }


    @Override
    public boolean areValid() {
        String validationErrors = "";
        if (0 == intValue(numberOfSamples.getValue())) {
            validationErrors += " - a number of samples must be greater than zero<br>";
        } else if (1000 < intValue(numberOfSamples.getValue())) {
            validationErrors += " - this submission does not support more than 1000 samples<br>";
        }
        if (!validationErrors.isEmpty()) {
            NotificationPopupPanel.error("Please correct the following:<br><br>" + validationErrors, false, false);
            return false;
        }
        return true;
    }


    private int intValue(String value) {
        if (value == null) {
            return 0;
        }
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            return 0;
        }
    }
}
