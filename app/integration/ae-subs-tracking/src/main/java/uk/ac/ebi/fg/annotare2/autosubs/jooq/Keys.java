/*
 * This file is generated by jOOQ.
 */
package uk.ac.ebi.fg.annotare2.autosubs.jooq;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import uk.ac.ebi.fg.annotare2.autosubs.jooq.tables.DataFiles;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.tables.Experiments;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.tables.Roles;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.tables.RolesUsers;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.tables.Spreadsheets;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.tables.Users;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.tables.records.DataFilesRecord;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.tables.records.ExperimentsRecord;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.tables.records.RolesRecord;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.tables.records.RolesUsersRecord;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.tables.records.SpreadsheetsRecord;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.tables.records.UsersRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * ae_autosubs.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DataFilesRecord> KEY_DATA_FILES_PRIMARY = Internal.createUniqueKey(DataFiles.DATA_FILES, DSL.name("KEY_data_files_PRIMARY"), new TableField[] { DataFiles.DATA_FILES.ID }, true);
    public static final UniqueKey<ExperimentsRecord> KEY_EXPERIMENTS_EXPERIMENTS_ACCID_UQ = Internal.createUniqueKey(Experiments.EXPERIMENTS, DSL.name("KEY_experiments_experiments_accid_uq"), new TableField[] { Experiments.EXPERIMENTS.ID, Experiments.EXPERIMENTS.ACCESSION }, true);
    public static final UniqueKey<ExperimentsRecord> KEY_EXPERIMENTS_PRIMARY = Internal.createUniqueKey(Experiments.EXPERIMENTS, DSL.name("KEY_experiments_PRIMARY"), new TableField[] { Experiments.EXPERIMENTS.ID }, true);
    public static final UniqueKey<RolesRecord> KEY_ROLES_PRIMARY = Internal.createUniqueKey(Roles.ROLES, DSL.name("KEY_roles_PRIMARY"), new TableField[] { Roles.ROLES.ID }, true);
    public static final UniqueKey<SpreadsheetsRecord> KEY_SPREADSHEETS_PRIMARY = Internal.createUniqueKey(Spreadsheets.SPREADSHEETS, DSL.name("KEY_spreadsheets_PRIMARY"), new TableField[] { Spreadsheets.SPREADSHEETS.ID }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_LOGIN = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_login"), new TableField[] { Users.USERS.LOGIN }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_PRIMARY"), new TableField[] { Users.USERS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<DataFilesRecord, ExperimentsRecord> DATA_FILES_IBFK_1 = Internal.createForeignKey(DataFiles.DATA_FILES, DSL.name("data_files_ibfk_1"), new TableField[] { DataFiles.DATA_FILES.EXPERIMENT_ID }, Keys.KEY_EXPERIMENTS_PRIMARY, new TableField[] { Experiments.EXPERIMENTS.ID }, true);
    public static final ForeignKey<ExperimentsRecord, UsersRecord> EXPERIMENTS_IBFK_1 = Internal.createForeignKey(Experiments.EXPERIMENTS, DSL.name("experiments_ibfk_1"), new TableField[] { Experiments.EXPERIMENTS.USER_ID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<RolesUsersRecord, UsersRecord> ROLES_USERS_IBFK_1 = Internal.createForeignKey(RolesUsers.ROLES_USERS, DSL.name("roles_users_ibfk_1"), new TableField[] { RolesUsers.ROLES_USERS.USER_ID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<RolesUsersRecord, RolesRecord> ROLES_USERS_IBFK_2 = Internal.createForeignKey(RolesUsers.ROLES_USERS, DSL.name("roles_users_ibfk_2"), new TableField[] { RolesUsers.ROLES_USERS.ROLE_ID }, Keys.KEY_ROLES_PRIMARY, new TableField[] { Roles.ROLES.ID }, true);
    public static final ForeignKey<SpreadsheetsRecord, ExperimentsRecord> SPREADSHEETS_IBFK_1 = Internal.createForeignKey(Spreadsheets.SPREADSHEETS, DSL.name("spreadsheets_ibfk_1"), new TableField[] { Spreadsheets.SPREADSHEETS.EXPERIMENT_ID }, Keys.KEY_EXPERIMENTS_PRIMARY, new TableField[] { Experiments.EXPERIMENTS.ID }, true);
}
