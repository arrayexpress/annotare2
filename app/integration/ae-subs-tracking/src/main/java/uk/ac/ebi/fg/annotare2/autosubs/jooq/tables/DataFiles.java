/*
 * This file is generated by jOOQ.
 */
package uk.ac.ebi.fg.annotare2.autosubs.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.ac.ebi.fg.annotare2.autosubs.jooq.AeAutosubs;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.Indexes;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.Keys;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.tables.records.DataFilesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataFiles extends TableImpl<DataFilesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ae_autosubs.data_files</code>
     */
    public static final DataFiles DATA_FILES = new DataFiles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataFilesRecord> getRecordType() {
        return DataFilesRecord.class;
    }

    /**
     * The column <code>ae_autosubs.data_files.id</code>.
     */
    public final TableField<DataFilesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>ae_autosubs.data_files.experiment_id</code>.
     */
    public final TableField<DataFilesRecord, Integer> EXPERIMENT_ID = createField(DSL.name("experiment_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ae_autosubs.data_files.name</code>.
     */
    public final TableField<DataFilesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>ae_autosubs.data_files.is_unpacked</code>.
     */
    public final TableField<DataFilesRecord, Integer> IS_UNPACKED = createField(DSL.name("is_unpacked"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ae_autosubs.data_files.is_deleted</code>.
     */
    public final TableField<DataFilesRecord, Integer> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.INTEGER.nullable(false), this, "");

    private DataFiles(Name alias, Table<DataFilesRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataFiles(Name alias, Table<DataFilesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ae_autosubs.data_files</code> table reference
     */
    public DataFiles(String alias) {
        this(DSL.name(alias), DATA_FILES);
    }

    /**
     * Create an aliased <code>ae_autosubs.data_files</code> table reference
     */
    public DataFiles(Name alias) {
        this(alias, DATA_FILES);
    }

    /**
     * Create a <code>ae_autosubs.data_files</code> table reference
     */
    public DataFiles() {
        this(DSL.name("data_files"), null);
    }

    public <O extends Record> DataFiles(Table<O> child, ForeignKey<O, DataFilesRecord> key) {
        super(child, key, DATA_FILES);
    }

    @Override
    public Schema getSchema() {
        return AeAutosubs.AE_AUTOSUBS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DATA_FILES_EXPERIMENT_ID);
    }

    @Override
    public Identity<DataFilesRecord, Integer> getIdentity() {
        return (Identity<DataFilesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DataFilesRecord> getPrimaryKey() {
        return Keys.KEY_DATA_FILES_PRIMARY;
    }

    @Override
    public List<UniqueKey<DataFilesRecord>> getKeys() {
        return Arrays.<UniqueKey<DataFilesRecord>>asList(Keys.KEY_DATA_FILES_PRIMARY);
    }

    @Override
    public List<ForeignKey<DataFilesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DataFilesRecord, ?>>asList(Keys.DATA_FILES_IBFK_1);
    }

    private transient Experiments _experiments;

    public Experiments experiments() {
        if (_experiments == null)
            _experiments = new Experiments(this, Keys.DATA_FILES_IBFK_1);

        return _experiments;
    }

    @Override
    public DataFiles as(String alias) {
        return new DataFiles(DSL.name(alias), this);
    }

    @Override
    public DataFiles as(Name alias) {
        return new DataFiles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataFiles rename(String name) {
        return new DataFiles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataFiles rename(Name name) {
        return new DataFiles(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
