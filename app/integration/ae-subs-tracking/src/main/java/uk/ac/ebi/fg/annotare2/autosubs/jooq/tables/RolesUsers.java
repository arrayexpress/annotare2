/*
 * This file is generated by jOOQ.
 */
package uk.ac.ebi.fg.annotare2.autosubs.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.ac.ebi.fg.annotare2.autosubs.jooq.AeAutosubs;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.Indexes;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.Keys;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.tables.records.RolesUsersRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RolesUsers extends TableImpl<RolesUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ae_autosubs.roles_users</code>
     */
    public static final RolesUsers ROLES_USERS = new RolesUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RolesUsersRecord> getRecordType() {
        return RolesUsersRecord.class;
    }

    /**
     * The column <code>ae_autosubs.roles_users.user_id</code>.
     */
    public final TableField<RolesUsersRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ae_autosubs.roles_users.role_id</code>.
     */
    public final TableField<RolesUsersRecord, Integer> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private RolesUsers(Name alias, Table<RolesUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private RolesUsers(Name alias, Table<RolesUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ae_autosubs.roles_users</code> table reference
     */
    public RolesUsers(String alias) {
        this(DSL.name(alias), ROLES_USERS);
    }

    /**
     * Create an aliased <code>ae_autosubs.roles_users</code> table reference
     */
    public RolesUsers(Name alias) {
        this(alias, ROLES_USERS);
    }

    /**
     * Create a <code>ae_autosubs.roles_users</code> table reference
     */
    public RolesUsers() {
        this(DSL.name("roles_users"), null);
    }

    public <O extends Record> RolesUsers(Table<O> child, ForeignKey<O, RolesUsersRecord> key) {
        super(child, key, ROLES_USERS);
    }

    @Override
    public Schema getSchema() {
        return AeAutosubs.AE_AUTOSUBS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ROLES_USERS_ROLE_ID, Indexes.ROLES_USERS_USER_ID);
    }

    @Override
    public List<ForeignKey<RolesUsersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RolesUsersRecord, ?>>asList(Keys.ROLES_USERS_IBFK_1, Keys.ROLES_USERS_IBFK_2);
    }

    private transient Users _users;
    private transient Roles _roles;

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.ROLES_USERS_IBFK_1);

        return _users;
    }

    public Roles roles() {
        if (_roles == null)
            _roles = new Roles(this, Keys.ROLES_USERS_IBFK_2);

        return _roles;
    }

    @Override
    public RolesUsers as(String alias) {
        return new RolesUsers(DSL.name(alias), this);
    }

    @Override
    public RolesUsers as(Name alias) {
        return new RolesUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RolesUsers rename(String name) {
        return new RolesUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RolesUsers rename(Name name) {
        return new RolesUsers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
