/*
 * This file is generated by jOOQ.
 */
package uk.ac.ebi.fg.annotare2.autosubs.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.ac.ebi.fg.annotare2.autosubs.jooq.AeAutosubs;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.Indexes;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.Keys;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.tables.records.ExperimentsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Experiments extends TableImpl<ExperimentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ae_autosubs.experiments</code>
     */
    public static final Experiments EXPERIMENTS = new Experiments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExperimentsRecord> getRecordType() {
        return ExperimentsRecord.class;
    }

    /**
     * The column <code>ae_autosubs.experiments.id</code>.
     */
    public final TableField<ExperimentsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>ae_autosubs.experiments.accession</code>.
     */
    public final TableField<ExperimentsRecord, String> ACCESSION = createField(DSL.name("accession"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>ae_autosubs.experiments.name</code>.
     */
    public final TableField<ExperimentsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>ae_autosubs.experiments.user_id</code>.
     */
    public final TableField<ExperimentsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ae_autosubs.experiments.checker_score</code>.
     */
    public final TableField<ExperimentsRecord, Integer> CHECKER_SCORE = createField(DSL.name("checker_score"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ae_autosubs.experiments.software</code>.
     */
    public final TableField<ExperimentsRecord, String> SOFTWARE = createField(DSL.name("software"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>ae_autosubs.experiments.status</code>.
     */
    public final TableField<ExperimentsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>ae_autosubs.experiments.data_warehouse_ready</code>.
     */
    public final TableField<ExperimentsRecord, Integer> DATA_WAREHOUSE_READY = createField(DSL.name("data_warehouse_ready"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ae_autosubs.experiments.date_last_edited</code>.
     */
    public final TableField<ExperimentsRecord, LocalDateTime> DATE_LAST_EDITED = createField(DSL.name("date_last_edited"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>ae_autosubs.experiments.date_submitted</code>.
     */
    public final TableField<ExperimentsRecord, LocalDateTime> DATE_SUBMITTED = createField(DSL.name("date_submitted"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>ae_autosubs.experiments.date_last_processed</code>.
     */
    public final TableField<ExperimentsRecord, LocalDateTime> DATE_LAST_PROCESSED = createField(DSL.name("date_last_processed"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>ae_autosubs.experiments.in_curation</code>.
     */
    public final TableField<ExperimentsRecord, Integer> IN_CURATION = createField(DSL.name("in_curation"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ae_autosubs.experiments.curator</code>.
     */
    public final TableField<ExperimentsRecord, String> CURATOR = createField(DSL.name("curator"), SQLDataType.CHAR(30), this, "");

    /**
     * The column <code>ae_autosubs.experiments.comment</code>.
     */
    public final TableField<ExperimentsRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>ae_autosubs.experiments.experiment_type</code>.
     */
    public final TableField<ExperimentsRecord, String> EXPERIMENT_TYPE = createField(DSL.name("experiment_type"), SQLDataType.CHAR(30), this, "");

    /**
     * The column <code>ae_autosubs.experiments.miamexpress_login</code>.
     */
    public final TableField<ExperimentsRecord, String> MIAMEXPRESS_LOGIN = createField(DSL.name("miamexpress_login"), SQLDataType.CHAR(30), this, "");

    /**
     * The column <code>ae_autosubs.experiments.miamexpress_subid</code>.
     */
    public final TableField<ExperimentsRecord, Integer> MIAMEXPRESS_SUBID = createField(DSL.name("miamexpress_subid"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ae_autosubs.experiments.is_affymetrix</code>.
     */
    public final TableField<ExperimentsRecord, Integer> IS_AFFYMETRIX = createField(DSL.name("is_affymetrix"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ae_autosubs.experiments.is_uhts</code>.
     */
    public final TableField<ExperimentsRecord, Integer> IS_UHTS = createField(DSL.name("is_uhts"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ae_autosubs.experiments.use_native_datafiles</code>.
     */
    public final TableField<ExperimentsRecord, Integer> USE_NATIVE_DATAFILES = createField(DSL.name("use_native_datafiles"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ae_autosubs.experiments.is_mx_batchloader</code>.
     */
    public final TableField<ExperimentsRecord, Integer> IS_MX_BATCHLOADER = createField(DSL.name("is_mx_batchloader"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ae_autosubs.experiments.is_deleted</code>.
     */
    public final TableField<ExperimentsRecord, Integer> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ae_autosubs.experiments.miame_score</code>.
     */
    public final TableField<ExperimentsRecord, Integer> MIAME_SCORE = createField(DSL.name("miame_score"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ae_autosubs.experiments.in_data_warehouse</code>.
     */
    public final TableField<ExperimentsRecord, Integer> IN_DATA_WAREHOUSE = createField(DSL.name("in_data_warehouse"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ae_autosubs.experiments.num_submissions</code>.
     */
    public final TableField<ExperimentsRecord, Integer> NUM_SUBMISSIONS = createField(DSL.name("num_submissions"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ae_autosubs.experiments.submitter_description</code>.
     */
    public final TableField<ExperimentsRecord, String> SUBMITTER_DESCRIPTION = createField(DSL.name("submitter_description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>ae_autosubs.experiments.curated_name</code>.
     */
    public final TableField<ExperimentsRecord, String> CURATED_NAME = createField(DSL.name("curated_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>ae_autosubs.experiments.num_samples</code>.
     */
    public final TableField<ExperimentsRecord, Integer> NUM_SAMPLES = createField(DSL.name("num_samples"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ae_autosubs.experiments.num_hybridizations</code>.
     */
    public final TableField<ExperimentsRecord, Integer> NUM_HYBRIDIZATIONS = createField(DSL.name("num_hybridizations"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ae_autosubs.experiments.has_raw_data</code>.
     */
    public final TableField<ExperimentsRecord, Integer> HAS_RAW_DATA = createField(DSL.name("has_raw_data"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ae_autosubs.experiments.has_processed_data</code>.
     */
    public final TableField<ExperimentsRecord, Integer> HAS_PROCESSED_DATA = createField(DSL.name("has_processed_data"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ae_autosubs.experiments.has_gds</code>.
     */
    public final TableField<ExperimentsRecord, Byte> HAS_GDS = createField(DSL.name("has_gds"), SQLDataType.TINYINT, this, "");

    /**
     * The column <code>ae_autosubs.experiments.release_date</code>.
     */
    public final TableField<ExperimentsRecord, LocalDateTime> RELEASE_DATE = createField(DSL.name("release_date"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>ae_autosubs.experiments.is_released</code>.
     */
    public final TableField<ExperimentsRecord, Integer> IS_RELEASED = createField(DSL.name("is_released"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ae_autosubs.experiments.ae_miame_score</code>.
     */
    public final TableField<ExperimentsRecord, Integer> AE_MIAME_SCORE = createField(DSL.name("ae_miame_score"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ae_autosubs.experiments.migration_status</code>.
     */
    public final TableField<ExperimentsRecord, String> MIGRATION_STATUS = createField(DSL.name("migration_status"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>ae_autosubs.experiments.migration_comment</code>.
     */
    public final TableField<ExperimentsRecord, String> MIGRATION_COMMENT = createField(DSL.name("migration_comment"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>ae_autosubs.experiments.migration_source</code>.
     */
    public final TableField<ExperimentsRecord, String> MIGRATION_SOURCE = createField(DSL.name("migration_source"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>ae_autosubs.experiments.file_to_load</code>.
     */
    public final TableField<ExperimentsRecord, String> FILE_TO_LOAD = createField(DSL.name("file_to_load"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>ae_autosubs.experiments.atlas_fail_score</code>.
     */
    public final TableField<ExperimentsRecord, String> ATLAS_FAIL_SCORE = createField(DSL.name("atlas_fail_score"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>ae_autosubs.experiments.annotare_submission_id</code>.
     */
    public final TableField<ExperimentsRecord, Integer> ANNOTARE_SUBMISSION_ID = createField(DSL.name("annotare_submission_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ae_autosubs.experiments.file_validation_status</code>.
     */
    public final TableField<ExperimentsRecord, String> FILE_VALIDATION_STATUS = createField(DSL.name("file_validation_status"), SQLDataType.VARCHAR(255), this, "");

    private Experiments(Name alias, Table<ExperimentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Experiments(Name alias, Table<ExperimentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ae_autosubs.experiments</code> table reference
     */
    public Experiments(String alias) {
        this(DSL.name(alias), EXPERIMENTS);
    }

    /**
     * Create an aliased <code>ae_autosubs.experiments</code> table reference
     */
    public Experiments(Name alias) {
        this(alias, EXPERIMENTS);
    }

    /**
     * Create a <code>ae_autosubs.experiments</code> table reference
     */
    public Experiments() {
        this(DSL.name("experiments"), null);
    }

    public <O extends Record> Experiments(Table<O> child, ForeignKey<O, ExperimentsRecord> key) {
        super(child, key, EXPERIMENTS);
    }

    @Override
    public Schema getSchema() {
        return AeAutosubs.AE_AUTOSUBS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EXPERIMENTS_USER_ID);
    }

    @Override
    public Identity<ExperimentsRecord, Integer> getIdentity() {
        return (Identity<ExperimentsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExperimentsRecord> getPrimaryKey() {
        return Keys.KEY_EXPERIMENTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ExperimentsRecord>> getKeys() {
        return Arrays.<UniqueKey<ExperimentsRecord>>asList(Keys.KEY_EXPERIMENTS_PRIMARY, Keys.KEY_EXPERIMENTS_EXPERIMENTS_ACCID_UQ);
    }

    @Override
    public List<ForeignKey<ExperimentsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ExperimentsRecord, ?>>asList(Keys.EXPERIMENTS_IBFK_1);
    }

    private transient Users _users;

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.EXPERIMENTS_IBFK_1);

        return _users;
    }

    @Override
    public Experiments as(String alias) {
        return new Experiments(DSL.name(alias), this);
    }

    @Override
    public Experiments as(Name alias) {
        return new Experiments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Experiments rename(String name) {
        return new Experiments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Experiments rename(Name name) {
        return new Experiments(name, null);
    }
}
