/*
 * This file is generated by jOOQ.
 */
package uk.ac.ebi.fg.annotare2.autosubs.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.ac.ebi.fg.annotare2.autosubs.jooq.AeAutosubs;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.Indexes;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.Keys;
import uk.ac.ebi.fg.annotare2.autosubs.jooq.tables.records.SpreadsheetsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Spreadsheets extends TableImpl<SpreadsheetsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ae_autosubs.spreadsheets</code>
     */
    public static final Spreadsheets SPREADSHEETS = new Spreadsheets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpreadsheetsRecord> getRecordType() {
        return SpreadsheetsRecord.class;
    }

    /**
     * The column <code>ae_autosubs.spreadsheets.id</code>.
     */
    public final TableField<SpreadsheetsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>ae_autosubs.spreadsheets.experiment_id</code>.
     */
    public final TableField<SpreadsheetsRecord, Integer> EXPERIMENT_ID = createField(DSL.name("experiment_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ae_autosubs.spreadsheets.name</code>.
     */
    public final TableField<SpreadsheetsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>ae_autosubs.spreadsheets.is_deleted</code>.
     */
    public final TableField<SpreadsheetsRecord, Integer> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.INTEGER.nullable(false), this, "");

    private Spreadsheets(Name alias, Table<SpreadsheetsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Spreadsheets(Name alias, Table<SpreadsheetsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ae_autosubs.spreadsheets</code> table reference
     */
    public Spreadsheets(String alias) {
        this(DSL.name(alias), SPREADSHEETS);
    }

    /**
     * Create an aliased <code>ae_autosubs.spreadsheets</code> table reference
     */
    public Spreadsheets(Name alias) {
        this(alias, SPREADSHEETS);
    }

    /**
     * Create a <code>ae_autosubs.spreadsheets</code> table reference
     */
    public Spreadsheets() {
        this(DSL.name("spreadsheets"), null);
    }

    public <O extends Record> Spreadsheets(Table<O> child, ForeignKey<O, SpreadsheetsRecord> key) {
        super(child, key, SPREADSHEETS);
    }

    @Override
    public Schema getSchema() {
        return AeAutosubs.AE_AUTOSUBS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SPREADSHEETS_EXPERIMENT_ID);
    }

    @Override
    public Identity<SpreadsheetsRecord, Integer> getIdentity() {
        return (Identity<SpreadsheetsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SpreadsheetsRecord> getPrimaryKey() {
        return Keys.KEY_SPREADSHEETS_PRIMARY;
    }

    @Override
    public List<UniqueKey<SpreadsheetsRecord>> getKeys() {
        return Arrays.<UniqueKey<SpreadsheetsRecord>>asList(Keys.KEY_SPREADSHEETS_PRIMARY);
    }

    @Override
    public List<ForeignKey<SpreadsheetsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SpreadsheetsRecord, ?>>asList(Keys.SPREADSHEETS_IBFK_1);
    }

    private transient Experiments _experiments;

    public Experiments experiments() {
        if (_experiments == null)
            _experiments = new Experiments(this, Keys.SPREADSHEETS_IBFK_1);

        return _experiments;
    }

    @Override
    public Spreadsheets as(String alias) {
        return new Spreadsheets(DSL.name(alias), this);
    }

    @Override
    public Spreadsheets as(Name alias) {
        return new Spreadsheets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Spreadsheets rename(String name) {
        return new Spreadsheets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Spreadsheets rename(Name name) {
        return new Spreadsheets(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
